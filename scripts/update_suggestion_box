#!/usr/bin/env python
"""Updates status (archived or not) of the suggestions stored in the database.

Requires the settings.yaml configuration file used to parameterize genomics-status
"""
import argparse
import couchdb
import logging
import sys
import yaml
from requests.exceptions import HTTPError

from atlassian import Jira


def main(config):
    log_file = config.get("sb_log", None)
    if log_file is None:
        logging.error("No logfile found in config file. Exiting.")
        sys.exit(-1)

    # set logger object
    logging.basicConfig(
        filename=log_file,
        level=logging.INFO,
        format="%(asctime)s %(levelname)s: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    log = logging.getLogger(__name__)

    # Connect to Jira
    jira_url = config.get("jira").get("url")
    jira_user= config.get("jira").get("user")
    jira_api_token = config.get("jira").get("api_token")    
    jira = Jira(url=jira_url, username=jira_user, password=jira_api_token)

    # Connect to StatusDB
    s = couchdb.Server(config.get("couch_server"))

    # Get list of stored suggestions
    sb_database = s["suggestion_box"]
    unarchived_cards ={row.key: row.value for row in sb_database.view("card/unarchived_jira_cards").rows}

    docs = []
    for doc_id, card_id in unarchived_cards.items():
        try:
            jira_card = jira.issue(card_id)
            closed = jira_card["fields"]["status"]["statusCategory"]["name"] == "Done"
            if closed:
                doc = sb_database.get(doc_id)
                doc["archived"] = closed
                log.info(f"Card with key {jira_card['key']} and card_id {card_id} was archived")
                docs.append(doc)
        except HTTPError:
            log.warning(
                f"Card with cardid {card_id} in DB was not found on Jira, it was likely deleted"
            )
            continue

    if docs:
        sb_database.update(docs)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("config", type=str, help="Path to settings.yaml file")
    args = parser.parse_args()

    try:
        with open(args.config, "r") as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
    except IOError:
        raise IOError(
            "Please make sure to specify a correct path to settings.yaml file"
        )

    main(config)
